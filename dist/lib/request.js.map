{"version":3,"sources":["lib/request.ts"],"names":["getErrorString","retry","prms","interval","backoff","max_interval","max_tries","predicate","err","StatusCodeError","statusCode","throw_original","requestOptions","headers","charset","accept","publisher","method","apiKey","body","url","root","Object","assign","qs","api_key","catch","error","res","then","decodedError","options","response","result","getter","get","errr","errors"],"mappings":"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","file":"request.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport blueRetry    from 'bluebird-retry';\nimport request      from 'request-promise';\nimport errors       from 'request-promise/errors';\nimport js2xmlparser from 'js2xmlparser';\nimport xml2js       from 'xml2js';\nimport moment       from 'moment';\nimport log          from 'winston';\nimport R            from 'ramda';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  toXml\n, fromXml\n} from '../utils/xml';\n\nimport {\n  debug\n} from '../utils';\n\nimport {\n  Publisher\n} from './api/util';\n\nimport {\n  InvoiceXpressInvalidId\n} from './errors';\n\n// ---------------------------------------------------------------------------\n// Internal Functions --------------------------------------------------------\n// ---------------------------------------------------------------------------\n\n// https://invoicexpress.com/api/introduction/request-limits\n// You can perform up to 100 requests per minute from the same IP address.\n// If you exceed this limit, youâ€™ll get a 429 Too Many Requests response for\n// subsequent requests.\n//\n// We recommend you handle 429 responses so your integration retries\n// requests automatically.\n//\n// ATTN: our experience is that they cannot even handle that, hence the times 2\nconst retry = prms => blueRetry(prms,\n  { interval : 2 * 60 * 1000 / 100\n  , backoff  : 2\n  , max_interval: 1000\n  , max_tries: 6\n  , predicate: err => err instanceof errors.StatusCodeError\n                            && err.statusCode === 429\n  , throw_original: true\n  });\n\nconst requestOptions = {\n  headers: {\n    'content-type': 'application/xml',\n    charset: 'utf8',\n    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) ' +\n                  'AppleWebKit/537.36 (KHTML, like Gecko) ' +\n                  'Chrome/46.0.2490.80 Safari/537.36',\n    accept: '*/*'\n  },\n  // simple: true,\n  // resolveWithFullResponse: true,\n};\n\n// ---------------------------------------------------------------------------\n// External Functions --------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport const publisher =\n  ({method, apiKey, body, url, root} : Publisher) =>\n  request({...requestOptions\n          , method\n          , url\n          , qs: {api_key: apiKey}\n          , body: body ? toXml(root, body) : ''\n          })\n  // For status code !== 2xx\n  .catch(errors.StatusCodeError, res => {\n    log.error(`${method}@${url}/${root}: [${res.statusCode}] ` +\n              `${debug(res.error)}`\n              , '\\nXML:\\n'\n              , toXml(root, body));\n    if (res.statusCode !== 401) {\n      return fromXml(res.error)\n      .then(decodedError => {\n        // we need to recreate the error from scratch :(\n        throw new errors.StatusCodeError( res.statusCode\n                                        , decodedError\n                                        , res.options\n                                        , res.response);\n      });\n    } else {\n      throw res;\n    }\n  })\n  .then(result => fromXml(result));\n\nexport const getter =\n  ({apiKey, url}) =>\n  request.get({...requestOptions\n              , url\n              , qs: {api_key: apiKey}\n              })\n  // For status code !== 2xx\n  .catch(errors.StatusCodeError, res => {\n    log.error(`GET@${url} : [${res.statusCode}] ` +\n              `${debug(res.error)}`);\n    if (res.statusCode === 404) {\n      throw new InvoiceXpressInvalidId(`${url}`);\n    } else {\n      throw res;\n    }\n  })\n  .then(result => fromXml(result));\n\nexport function getErrorString(errr) {\n    //        InvX  Invx\n  return errr.errors.error;\n}\n"]}