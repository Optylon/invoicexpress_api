{"version":3,"sources":["lib/api/tax/index.ts"],"names":["taxUrlFn","accountName","taxUrl","create","Tax","auth","body","Object","assign","root","get","catch","StatusCodeError","err","statusCode","error"],"mappings":";;;;;;;;AAOA;AACA;AACA;;;AALA;;;;AAMA;;AAMA;;AASA;;AAeA;;;;;;AA6BA;AACA;AACA;AACA,IAAMA,WAAY,SAAZA,QAAY;AAAA,WAAkB,mBAAQC,WAAR,CAAlB;AAAA,CAAlB;AAEO,IAAMC,0BACX,EAAEC,QAAU;AAAA,YAAEF,WAAF,QAAEA,WAAF;AAAA,eAAsBD,SAASC,WAAT,CAAtB;AAAA;AAAZ,CADK;AAIP;AACA;AACA;;IACMG,G,WAAAA,G;;;;;;;+BAIAC,I,EACAC,I,EAAsB;AAExB,mBAAO,wBAASC,OAAAC,MAAA,CAAA,EAAA,EAAM,qBAAUH,IAAV,EAAgBH,OAAOC,MAAvB,CAAN,EAAoC,EACjCM,MAAM,KAAKA,IADsB,EAEjCH,UAFiC,EAApC,CAAT,EAINI,GAJM,CAIF,KAJE,EAKNC,KALM,CAKA,iBAAOC,eALP,EAKwB,eAAG;AAChC,wBAAQC,IAAIC,UAAZ;AACE,yBAAK,GAAL;AAAU,8BAAM,wCAA+B,kBAAMT,IAAN,CAA/B,CAAN;AACV,yBAAK,GAAL;AACE,4BAAI,6BAAeQ,IAAIE,KAAnB,MAA8B,0BAAlC,EAA8D;AAC5D,kCAAM,gEACY,kBAAMT,IAAN,CADZ,CAAN;AAGD,yBAJD,MAIO,IAAI,6BAAeO,IAAIE,KAAnB,MACC,yBADL,EACgC;AACrC,kCAAM,uDACY,kBAAMT,IAAN,CADZ,CAAN;AAGD,yBALM,MAKA;AACL,kCAAM,2DACY,kBAAMA,IAAN,CADZ,CAAN;AAGD;AACH;AAAU,8BAAMO,GAAN;AAjBZ;AAmBD,aAzBM,CAAP;AA2BD;;;;;;AAjCMT,IAAAK,IAAA,GAAO,KAAP","file":"index.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport request  from 'request-promise';\nimport errors   from 'request-promise/errors';\nimport R        from 'ramda';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  getter\n, publisher\n, getErrorString\n} from '../../request';\n\nimport {\n  baseUrl\n, unAuthPostSetup\n, postSetup\n, putSetup\n, getSetup\n, listSetup\n} from '../util';\n\nimport {\n  debug\n} from '../../../utils';\n\nimport {\n  Auth\n, IdBase\n, SupportedLanguages\n, TermsAndConditions\n} from '../sharedInterfaces';\n\nimport {\n  InvoiceGetResponse\n} from '../invoice';\n\nimport {\n  InvalidInvoiceXpressAPIKey\n, InvoiceXpressElementAlreadyExists\n, InvoiceXpressInvalidName\n, InvoiceXpressUnexpectedError\n} from '../../errors';\n\n// ---------------------------------------------------------------------------\n// Types ---------------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport type Region\n  = 'PT'\n  | 'PT-AC'\n  | 'PT-MA'\n  | 'Desconhecido'\n  ;\n\nexport interface TaxCreateRequest\n  { name    : string\n  , value   : number\n  , region  : Region\n    // TODO: missing region and default tax\n  }\n\nexport interface TaxCreateResponse\n  extends TaxCreateRequest\n  { id: number\n  }\n\n// ---------------------------------------------------------------------------\n// Tax URLs -------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst taxUrlFn  = accountName => `${baseUrl(accountName)}/taxes`;\n\nexport const taxUrl =\n  { create  : ({accountName}) => `${taxUrlFn(accountName)}.xml`\n  };\n\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class Tax {\n  static root = 'tax';\n\n  static create(\n      auth: Auth\n    , body: TaxCreateRequest\n    ) : Promise<TaxCreateResponse> {\n    return publisher({ ...postSetup(auth, taxUrl.create)\n                     , root: this.root\n                     , body\n                     })\n    .get('tax')\n    .catch(errors.StatusCodeError, err => {\n      switch (err.statusCode) {\n        case 401: throw new InvalidInvoiceXpressAPIKey(debug(auth));\n        case 422:\n          if (getErrorString(err.error) === 'Tax name already exists.') {\n            throw new InvoiceXpressElementAlreadyExists(\n               `Create tax: ${debug(body)}`\n            );\n          } else if (getErrorString(err.error) ===\n                      'The tax name is invalid') {\n            throw new InvoiceXpressInvalidName(\n               `Create tax: ${debug(body)}`\n            );\n          } else {\n            throw new InvoiceXpressUnexpectedError(\n               `Create tax: ${debug(body)}`\n            );\n          }\n        default : throw err;\n      }\n    });\n\n  }\n}\n"]}