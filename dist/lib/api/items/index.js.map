{"version":3,"sources":["lib/api/items/index.ts"],"names":["DefaultTaxEnum","itemsUrlFn","accountName","itemsUrl","create","get","itemId","update","listAll","Items","auth","body","Object","assign","root","query","then","dt","data"],"mappings":";;;;;;;qjBAKA;AACA;AACA;;;AACA;;AAKA;;;;AAkCA,IAAYA,mDAAZ;AAAA,CAAA,UAAYA,cAAZ,EAA0B;AACtBA,mBAAAA,eAAA,eAAA,IAAA,CAAA,IAAA,eAAA;AACAA,mBAAAA,eAAA,YAAA,IAAA,CAAA,IAAA,YAAA;AACD,CAHH,EAAYA,2BAAAA,cAAA,GAAAA,iBAAc,EAAd,CAAZ;AAmEA;AACA;AACA;AACA,IAAMC,aAAc,SAAdA,UAAc;AAAA,WAAkB,mBAAQC,WAAR,CAAlB;AAAA,CAApB;AAEO,IAAMC,8BACX,EAAEC,QAAU;AAAA,YAAEF,WAAF,QAAEA,WAAF;AAAA,eAAsBD,WAAWC,WAAX,CAAtB;AAAA,KAAZ;AACEG,SAAU;AAAA,YAAEH,WAAF,SAAEA,WAAF;AAAA,YAAeI,MAAf,SAAeA,MAAf;AAAA,eACOL,WAAWC,WAAX,CADP,SACkCI,MADlC;AAAA;AAEV;;AAHF,MAIEC,QAAU;AAAA,YAAEL,WAAF,SAAEA,WAAF;AAAA,YAAeI,MAAf,SAAeA,MAAf;AAAA,eACOL,WAAWC,WAAX,CADP,SACkCI,MADlC;AAAA,KAJZ;AAMEE,aAAU;AAAA,YAAEN,WAAF,SAAEA,WAAF;AAAA,eAAsBD,WAAWC,WAAX,CAAtB;AAAA;AANZ,CADK;AAUP;AACA;AACA;;IACMO,K,WAAAA,K;;;;;;;+BAIAC,I,EACAC,I,EAAwB;AAE1B,mBAAO,wBAASC,OAAAC,MAAA,CAAA,EAAA,EAAM,qBAAUH,IAAV,EAAgBP,SAASC,MAAzB,CAAN,EAAsC,EACnCU,MAAM,KAAKA,IADwB,EAEnCH,UAFmC,EAAtC,CAAT,CAAP;AAID;;;4BAEUD,I,EAAYJ,M,EAAM;AAC3B,mBAAO,qBAAO,oBAASI,IAAT,EAAeP,SAASE,GAAxB,EAA6B,EAAEC,cAAF,EAA7B,CAAP,EACND,GADM,CACF,KAAKS,IADH,CAAP;AAED;AAED;;;;+BACeJ,I,EACAC,I,EACAL,M,EAAe;AAE5B,mBAAO,wBAASM,OAAAC,MAAA,CAAA,EAAA,EAAM,oBAASH,IAAT,EAAeP,SAASI,MAAxB,EAAgC,EAACD,cAAD,EAAhC,CAAN,EAA+C,EAC5CQ,MAAM,KAAKA,IADiC,EAE5CH,UAF4C,EAA/C,CAAT,CAAP;AAID;;;gCAEeD,I,EACAK,K,EAAqB;AAEnC,mBAAO,qBAAO,qBAAUL,IAAV,EAAgBP,SAASK,OAAzB,EAAkCO,KAAlC,CAAP,EAENV,GAFM,CAEF,OAFE,EAINW,IAJM,CAID;AAAA,uBAAMC,OAAO,IAAP,GAAc,EAAd,GAAmBA,GAAG,MAAH,CAAzB;AAAA,aAJC,EAOND,IAPM,CAOD;AAAA,uBAAQ,mBAAQE,IAAR,CAAR;AAAA,aAPC,CAAP;AAQD;;;;;;AAvCMT,MAAAK,IAAA,GAAO,MAAP","file":"index.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport R        from 'ramda';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  getter\n, publisher\n} from '../../request';\n\nimport {\n  baseUrl\n, postSetup\n, putSetup\n, getSetup\n, listSetup\n, toArray\n} from '../util';\n\nimport {\n  Auth\n, PerPage\n, Type\n} from '../sharedInterfaces';\n\n// ---------------------------------------------------------------------------\n// Types ---------------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport interface TaxName\n  { name   : string\n  }\n\nexport interface TaxBase extends TaxName\n  { // %, 0 <= 100\n    value       : number\n  }\n\nexport type TaxRegion\n  = 'PT'            // Portugal Continental\n  | 'PT-AC'         // AÃ§ores\n  | 'PT-MA'         // Madeira\n  | 'Desconhecido'  // Unknown\n  ;\n\nexport enum DefaultTaxEnum\n  { NonDefaultTax = 0\n  , DefaultTax    = 1\n  }\n\nexport interface TaxCreate extends TaxBase\n  { region      : TaxRegion\n  , defaultTax? : DefaultTaxEnum\n  }\n\nexport interface TaxGet extends TaxBase\n  { id : string\n  }\n\n// export interface ItemBase\n  // { name        : string\n  // , description : string\n    // // >= 0.0\n  // , unitPrice   : number\n    // // >= 0\n  // , quantity    : number\n  // }\n\nexport interface ItemBase\n  { name        : string\n  , description : string\n    // >= 0.0\n  , unitPrice   : number\n  }\n\nexport interface ItemCreate extends ItemBase\n  {  tax? : TaxName\n  }\n\nexport interface InvoiceItemCreate\n  extends ItemCreate\n  { quantity: number\n  }\n\nexport interface ItemsCreate\n  { '@': Type\n  , item: Array<ItemCreate>\n  }\n\nexport interface InvoiceItemsCreate\n  { '@': Type\n  , item: Array<InvoiceItemCreate>\n  }\n\nexport interface ItemsCreateRequest extends ItemCreate\n  { unit?    : string\n  }\n\nexport interface ItemsCreateResponse extends ItemsCreateRequest\n  { id       : string\n  , tax      : TaxGet\n  }\n\nexport type ItemsGetResponse = ItemsCreateResponse;\n\nexport type ItemsUpdateRequest = ItemsCreateRequest;\n\nexport interface ItemsListQuery\n  { page?    : number\n  , perPage? : PerPage\n  }\n\n// ---------------------------------------------------------------------------\n// Invoice URLs --------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst itemsUrlFn  = accountName => `${baseUrl(accountName)}/items`;\n\nexport const itemsUrl =\n  { create  : ({accountName}) => `${itemsUrlFn(accountName)}.xml`\n  , get     : ({accountName, itemId}) =>\n                  `${itemsUrlFn(accountName)}/${itemId}.xml`\n    // TODO: missing delete\n  , update  : ({accountName, itemId}) =>\n                  `${itemsUrlFn(accountName)}/${itemId}.xml`\n  , listAll : ({accountName}) => `${itemsUrlFn(accountName)}.xml`\n  };\n\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class Items {\n  static root = 'item';\n\n  static create(\n      auth: Auth\n    , body: ItemsCreateRequest\n    ) : Promise<ItemsGetResponse> {\n    return publisher({ ...postSetup(auth, itemsUrl.create)\n                     , root: this.root\n                     , body\n                     });\n  }\n\n  static get(auth: Auth, itemId) : Promise<ItemsGetResponse> {\n    return getter(getSetup(auth, itemsUrl.get, { itemId }))\n    .get(this.root);\n  }\n\n  // warning: this deletes non updated items\n  static update( auth: Auth\n               , body: ItemsUpdateRequest\n               , itemId : number\n               ) : Promise<void> {\n    return publisher({ ...putSetup(auth, itemsUrl.update, {itemId})\n                     , root: this.root\n                     , body\n                     });\n  }\n\n  static listAll( auth: Auth\n                , query: ItemsListQuery\n                ) : Promise<ItemsGetResponse[]> {\n    return getter(listSetup(auth, itemsUrl.listAll, query))\n    // { invoices: { '@': Type, {invoice: ItemsGetResponse}[] }}\n    .get('items')\n    // {invoice: ItemsGetResponse}[]\n    .then(dt => dt === null ? [] : dt['item'])\n    // xml lib places single element array as single object\n    // we do not want that\n    .then(data => toArray(data));\n  }\n\n}\n"]}