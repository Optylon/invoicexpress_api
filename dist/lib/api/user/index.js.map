{"version":3,"sources":["lib/api/user/index.ts"],"names":["debug","userUrl","login","accounts","changeAccount","accountName","x","inspect","depth","colors","User","body","Object","assign","root","get","then","data","auth","id"],"mappings":";;;;;;;qjBAAA;AACA;AACA;;AAGA;AACA;AACA;;;QAyDMA,K,GAAAA,K;;AA7DN;;;;AAKA;;AAKA;;;;;;AAyCA;AACA;AACA;AACO,IAAMC,4BACX,EAAEC,OAAU;AAAA,eAAS,oBAAQ,KAAR,CAAT;AAAA,KAAZ;AACEC,cAAU;AAAA,eAAS,oBAAQ,KAAR,CAAT;AAAA,KADZ;AAEEC,mBAAe;AAAA,YAAEC,WAAF,QAAEA,WAAF;AAAA,eACI,oBAAQA,WAAR,CADJ;AAAA;AAFjB,CADK;AAOD,SAAAL,KAAA,CAAgBM,CAAhB,EAAiB;AACrB,WAAO,eAAKC,OAAL,CAAaD,CAAb,EAAe,EAAEE,OAAO,IAAT,EAAeC,QAAQ,IAAvB,EAAf,CAAP;AACD;AAED;AACA;AACA;;IACMC,I,WAAAA,I;;;;;;;8BAESC,I,EAAiB;AAC5B,mBAAO,wBAASC,OAAAC,MAAA,CAAA,EAAA,EAAM,4BAAgBZ,QAAQC,KAAxB,CAAN,EAAoC,EACjCY,MAAM,aAD2B,EAEjCH,UAFiC,EAApC,CAAT,EAKNI,GALM,CAKF,UALE,EAONA,GAPM,CAOF,SAPE,EAUNC,IAVM,CAUD;AAAA,uBAAQ,oBAAQC,IAAR,CAAR;AAAA,aAVC,CAAP;AAWA;AACD;;;iCAEeC,I,EAAU;AACxB,mBAAO,qBAAO,qBAASA,IAAT,EAAejB,QAAQE,QAAvB,EAAiC,EAAjC,CAAP,EAENY,GAFM,CAEF,UAFE,EAINA,GAJM,CAIF,SAJE,EAONC,IAPM,CAOD;AAAA,uBAAQ,oBAAQC,IAAR,CAAR;AAAA,aAPC,CAAP;AAQA;AACD;;;sCAEoBC,I,EAAYC,E,EAAE;AACjC,mBAAO,wBAASP,OAAAC,MAAA,CAAA,EAAA,EAAM,qBAASK,IAAT,EAAejB,QAAQG,aAAvB,EAAsC,EAACe,MAAD,EAAtC,CAAN,EAAiD,EAC9CL,MAAM,mBADwC,EAAjD,CAAT,CAAP;AAGD","file":"index.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport util     from 'util';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  getter\n, publisher\n} from '../../request';\n\nimport {\n  baseUrl\n, unAuthPostSetup\n, postSetup\n, putSetup\n, getSetup\n, listSetup\n, toArray\n} from '../util';\n\nimport {\n  AccountCreateResponse\n, AccountStatus\n, Roles\n} from '../account';\n\nimport {\n  Auth\n, IdBase\n, SupportedLanguages\n, TermsAndConditions\n} from '../sharedInterfaces';\n\n// ---------------------------------------------------------------------------\n// Types ---------------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport interface Credentials\n  { login   : string\n  , password: string\n  }\n\nexport interface AccountLoginInformation\n  extends AccountCreateResponse, AccountStatus\n  { blocked : boolean\n  , roles   : Roles\n  }\n\nexport type UserLoginResponse = AccountLoginInformation[];\n\nexport type UserAccountsResponse = AccountLoginInformation[];\n\n// ---------------------------------------------------------------------------\n// User URLs -----------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport const userUrl =\n  { login   : () => `${baseUrl('www')}/login.xml`\n  , accounts: () => `${baseUrl('www')}/users/accounts.xml`\n  , changeAccount: ({accountName}) =>\n                    `${baseUrl(accountName)}/users/change_account.xml`\n  };\n\nexport function debug(x) {\n  return util.inspect(x,{ depth: null, colors: true });\n}\n\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class User {\n\n  static login(body: Credentials) : Promise<UserLoginResponse> {\n    return publisher({ ...unAuthPostSetup(userUrl.login)\n                     , root: 'credentials'\n                     , body\n                     })\n    // { accounts: { account: AccountLoginInformation}[]}\n    .get('accounts')\n    // { account: AccountLoginInformation}[]\n    .get('account')\n    // xml lib places single element array as single object\n    // we do not want that\n    .then(data => toArray(data));\n    // AccountLoginInformation[]\n  }\n\n  static accounts(auth: Auth) : Promise<UserAccountsResponse> {\n    return getter(getSetup(auth, userUrl.accounts, { }))\n    // { accounts: { account: AccountLoginInformation}[]}\n    .get('accounts')\n    // { account: AccountLoginInformation}[]\n    .get('account')\n    // xml lib places single element array as single object\n    // we do not want that\n    .then(data => toArray(data));\n    // AccountLoginInformation[]\n  }\n\n  static changeAccount(auth: Auth, id) : Promise<void> {\n    return publisher({ ...putSetup(auth, userUrl.changeAccount, {id})\n                     , root: 'change_account_to'\n                     });\n  }\n}\n"]}