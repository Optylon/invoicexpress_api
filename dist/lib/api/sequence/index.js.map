{"version":3,"sources":["lib/api/sequence/index.ts"],"names":["sequenceUrlFn","accountName","sequenceUrl","create","get","sequenceId","update","listAll","Sequence","auth","body","Object","assign","root","catch","StatusCodeError","err","statusCode","error"],"mappings":";;;;;;;;AAOA;AACA;AACA;;;AALA;;;;AAMA;;AAMA;;AASA;;AAeA;;;;;;AA4CA;AACA;AACA;AACA,IAAMA,gBAAiB,SAAjBA,aAAiB;AAAA,WAAkB,mBAAQC,WAAR,CAAlB;AAAA,CAAvB;AAEO,IAAMC,oCACX,EAAEC,QAAU;AAAA,YAAEF,WAAF,QAAEA,WAAF;AAAA,eAAsBD,cAAcC,WAAd,CAAtB;AAAA,KAAZ;AACEG,SAAU;AAAA,YAAEH,WAAF,SAAEA,WAAF;AAAA,YAAeI,UAAf,SAAeA,UAAf;AAAA,eACKL,cAAcC,WAAd,CADL,SACmCI,UADnC;AAAA,KADZ;AAGEC,YAAU;AAAA,YAAEL,WAAF,SAAEA,WAAF;AAAA,YAAeI,UAAf,SAAeA,UAAf;AAAA,eACKL,cAAcC,WAAd,CADL,SACmCI,UADnC;AAAA,KAHZ;AAKEE,aAAU;AAAA,YAAEN,WAAF,SAAEA,WAAF;AAAA,eAAsBD,cAAcC,WAAd,CAAtB;AAAA;AALZ,CADK;AASP;AACA;AACA;;IACMO,Q,WAAAA,Q;;;;;;;+BAIAC,I,EACAC,I,EAA2B;AAE7B,mBAAO,wBAASC,OAAAC,MAAA,CAAA,EAAA,EAAM,qBAAUH,IAAV,EAAgBP,YAAYC,MAA5B,CAAN,EAAyC,EACtCU,MAAM,KAAKA,IAD2B,EAEtCH,UAFsC,EAAzC,CAAT,EAINN,GAJM,CAIF,UAJE,EAKNU,KALM,CAKA,iBAAOC,eALP,EAKwB,eAAG;AAChC,wBAAQC,IAAIC,UAAZ;AACE,yBAAK,GAAL;AAAU,8BAAM,wCAA+B,kBAAMR,IAAN,CAA/B,CAAN;AACV,yBAAK,GAAL;AACE,4BAAI,6BAAeO,IAAIE,KAAnB,MAA8B,+BAAlC,EAAmE;AACjE,kCAAM,qEACiB,kBAAMR,IAAN,CADjB,CAAN;AAGD,yBAJD,MAIO,IAAI,6BAAeM,IAAIE,KAAnB,MACC,8BADL,EACqC;AAC1C,kCAAM,4DACiB,kBAAMR,IAAN,CADjB,CAAN;AAGD,yBALM,MAKA;AACL,kCAAM,gEACiB,kBAAMA,IAAN,CADjB,CAAN;AAGD;AACH;AAAU,8BAAMM,GAAN;AAjBZ;AAmBD,aAzBM,CAAP;AA2BD;;;4BAGGP,I,EACAJ,U,EAAkB;AAEnB,mBAAO,qBAAO,oBAASI,IAAT,EAAeP,YAAYE,GAA3B,EAAgC,EAAEC,sBAAF,EAAhC,CAAP,EACPD,GADO,CACH,UADG,EAEPU,KAFO,CAED,iBAAOC,eAFN,EAEuB,eAAG;AAChC,wBAAQC,IAAIC,UAAZ;AACE,yBAAK,GAAL;AAAU,8BAAM,wCAA+B,kBAAMR,IAAN,CAA/B,CAAN;AACV,yBAAK,GAAL;AACE,4BAAI,6BAAeO,IAAIE,KAAnB,MAA8B,qBAAlC,EAAyD;AACvD,kCAAM,kEACcb,UADd,CAAN;AAGD;AACH;AAAU,8BAAMW,GAAN;AARZ;AAUD,aAbO,CAAP;AAcF;;;+BAGGP,I,EACAJ,U,EAAkB;AAElB,mBAAO,wBAAU,oBAASI,IAAT,EAAeP,YAAYI,MAA3B,EAAmC,EAAED,sBAAF,EAAnC,CAAV,CAAP;AACH;;;gCAEeI,I,EAAU;AAExB,mBAAO,qBAAO,oBAASA,IAAT,EAAeP,YAAYK,OAA3B,CAAP,EACNH,GADM,CACF,WADE,EAENA,GAFM,CAEF,UAFE,CAAP;AAGD;;;;;;AAnEMI,SAAAK,IAAA,GAAO,UAAP","file":"index.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport request  from 'request-promise';\nimport errors   from 'request-promise/errors';\nimport R        from 'ramda';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  getter\n, publisher\n, getErrorString\n} from '../../request';\n\nimport {\n  baseUrl\n, unAuthPostSetup\n, postSetup\n, putSetup\n, getSetup\n, listSetup\n} from '../util';\n\nimport {\n  debug\n} from '../../../utils';\n\nimport {\n  Auth\n, IdBase\n, SupportedLanguages\n, TermsAndConditions\n} from '../sharedInterfaces';\n\nimport {\n  InvoiceGetResponse\n} from '../invoice';\n\nimport {\n  InvalidInvoiceXpressAPIKey\n, InvoiceXpressElementAlreadyExists\n, InvoiceXpressInvalidName\n, InvoiceXpressUnexpectedError\n} from '../../errors';\n\n// ---------------------------------------------------------------------------\n// Types ---------------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport interface SequenceCreateRequest\n  { serie             : string\n  , defaultSequence?  : number\n  }\n\nexport interface SequenceGetResponse\n  { id                                 : number\n  , serie                              : string\n  , defaultSequence                    : number\n  , currentInvoiceNumber               : number\n  , currentInvoiceSequenceId           : number\n  , currentInvoiceReceiptNumber        : number\n  , currentInvoiceReceiptSequenceId    : number\n  , currentSimplifiedInvoiceNumber     : number\n  , currentSimplifiedInvoiceSequenceId : number\n  , currentCreditNoteNumber            : number\n  , currentCreditNoteSequenceId        : number\n  , currentDebitNoteNumber             : number\n  , currentDebitNoteSequenceId         : number\n  , currentReceiptNumber               : number\n  , currentReceiptSequenceId           : number\n  , currentShippingNumber              : number\n  , currentShippingSequenceId          : number\n  , currentTransportNumber             : number\n  , currentTransportSequenceId         : number\n  , currentDevolutionNumber            : number\n  , currentDevolutionSequenceId        : number\n  , currentProformaNumber              : number\n  , currentProformaSequenceId          : number\n  , currentQuoteNumber                 : number\n  , currentQuoteSequenceId             : number\n  , currentFeesNoteNumber              : number\n  , currentFeesNoteSequenceId          : number\n  }\n// ---------------------------------------------------------------------------\n// Sequence URLs -------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst sequenceUrlFn  = accountName => `${baseUrl(accountName)}/sequences`;\n\nexport const sequenceUrl =\n  { create  : ({accountName}) => `${sequenceUrlFn(accountName)}.xml`\n  , get     : ({accountName, sequenceId}) =>\n                `${sequenceUrlFn(accountName)}/${sequenceId}.xml`\n  , update  : ({accountName, sequenceId}) =>\n                `${sequenceUrlFn(accountName)}/${sequenceId}/set_current.xml`\n  , listAll : ({accountName}) => `${sequenceUrlFn(accountName)}.xml`\n  };\n\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class Sequence {\n  static root = 'sequence';\n\n  static create(\n      auth: Auth\n    , body: SequenceCreateRequest\n    ) : Promise<SequenceGetResponse> {\n    return publisher({ ...postSetup(auth, sequenceUrl.create)\n                     , root: this.root\n                     , body\n                     })\n    .get('sequence')\n    .catch(errors.StatusCodeError, err => {\n      switch (err.statusCode) {\n        case 401: throw new InvalidInvoiceXpressAPIKey(debug(auth));\n        case 422:\n          if (getErrorString(err.error) === 'Sequence name already exists.') {\n            throw new InvoiceXpressElementAlreadyExists(\n               `Create sequence: ${debug(body)}`\n            );\n          } else if (getErrorString(err.error) ===\n                      'The sequence name is invalid') {\n            throw new InvoiceXpressInvalidName(\n               `Create sequence: ${debug(body)}`\n            );\n          } else {\n            throw new InvoiceXpressUnexpectedError(\n               `Create sequence: ${debug(body)}`\n            );\n          }\n        default : throw err;\n      }\n    });\n\n  }\n\n  static get(\n      auth: Auth\n    , sequenceId: number\n    ) : Promise<SequenceGetResponse>{\n     return getter(getSetup(auth, sequenceUrl.get, { sequenceId }))\n    .get('sequence')\n    .catch(errors.StatusCodeError, err => {\n      switch (err.statusCode) {\n        case 401: throw new InvalidInvoiceXpressAPIKey(debug(auth));\n        case 404:\n          if (getErrorString(err.error) === 'No sequence matches') {\n            throw new InvoiceXpressElementAlreadyExists(\n               `Get sequence: ${sequenceId}`\n            );\n          }\n        default : throw err;\n      }\n    });\n  }\n\n  static update(\n      auth: Auth\n    , sequenceId: number\n    ) : Promise<SequenceGetResponse>{\n      return publisher(putSetup(auth, sequenceUrl.update, { sequenceId }));\n  }\n\n  static listAll( auth: Auth\n  ) : Promise<Array<SequenceGetResponse>> {\n    return getter(getSetup(auth, sequenceUrl.listAll))\n    .get('sequences')\n    .get('sequence');\n  }\n}\n"]}