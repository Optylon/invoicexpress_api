{"version":3,"sources":["lib/api/invoiceReceipt/index.ts"],"names":["invoiceReceiptUrlFn","accountName","generatePdfUrlFn","invoiceReceiptUrl","create","get","invoiceId","update","listAll","changeStatus","generatePdf","InvoiceReceipt","auth","body","Object","assign","root","catch","StatusCodeError","err","statusCode","error","startsWith","query","then","data"],"mappings":"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","file":"index.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport errors   from 'request-promise/errors';\nimport R        from 'ramda';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  getter\n, publisher\n, getErrorString\n} from '../../request';\n\nimport {\n  baseUrl\n, unAuthPostSetup\n, postSetup\n, putSetup\n, getSetup\n, listSetup\n, toArray\n} from '../util';\n\nimport {\n  InvoiceExpressCountry\n, InvoiceExpressCountryCode\n} from '../../../lib/country';\n\nimport {\n  TaxName\n, TaxBase\n, DefaultTaxEnum\n, TaxCreate\n, TaxGet\n, ItemBase\n, InvoiceItemsCreate\n} from '../items';\n\nimport {\n  Address\n, Auth\n, IdBase\n, SendOptions\n, SupportedLanguages\n, Type\n} from '../sharedInterfaces';\n\nimport {\n  debug\n} from '../../../utils';\n\nimport {\n  InvalidInvoiceXpressAPIKey\n, InvoiceXpressInvalidClient\n, InvoiceXpressNotArray\n, InvoiceXpressUnkownCountry\n, InvoiceXpressUnexpectedError\n} from '../../errors';\n\nimport {\n  InvoiceCreateRequest\n, InvoiceGetResponse\n, InvoiceListQuery\n, InvoiceChangeStateRequest\n, InvoiceUpdateRequest\n, GeneratePdfResponse\n} from '../invoice';\n\n// ---------------------------------------------------------------------------\n// Invoice URLs --------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst invoiceReceiptUrlFn  = accountName =>\n  `${baseUrl(accountName)}/invoice_receipts`;\n\nconst generatePdfUrlFn = accountName =>\n  `${baseUrl(accountName)}/api/pdf`;\n\nexport const invoiceReceiptUrl =\n  { create  : ({accountName}) => `${invoiceReceiptUrlFn(accountName)}.xml`\n  , get     : ({accountName, invoiceId}) =>\n      `${invoiceReceiptUrlFn(accountName)}/${invoiceId}.xml`\n  , update  : ({accountName, invoiceId}) =>\n      `${invoiceReceiptUrlFn(accountName)}/${invoiceId}.xml`\n  , listAll : ({accountName}) => `${invoiceReceiptUrlFn(accountName)}.xml`\n  , changeStatus: ({accountName, invoiceId}) =>\n      `${invoiceReceiptUrlFn(accountName)}/${invoiceId}/change-state.xml`\n  , generatePdf: ({accountName, invoiceId}) =>\n      `${generatePdfUrlFn(accountName)}/${invoiceId}.xml`\n  };\n\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class InvoiceReceipt {\n  static root = 'invoice';\n\n  static create(\n      auth: Auth\n    , body: InvoiceCreateRequest\n    ) : Promise<InvoiceGetResponse> {\n    return publisher({ ...postSetup(auth, invoiceReceiptUrl.create)\n                     , root: this.root\n                     , body\n                     })\n    .catch(errors.StatusCodeError, err => {\n      switch (err.statusCode) {\n        case 401: throw new InvalidInvoiceXpressAPIKey(debug(auth));\n        // TODO: still more errors to check\n        case 422:\n          if (getErrorString(err.error) ===\n                'Items element should be of type array') {\n            throw new InvoiceXpressNotArray(\n               `Create invoice items: ${debug(body)}`\n            );\n          } else if (getErrorString(err.error).startsWith('Country')) {\n            throw new InvoiceXpressUnkownCountry(\n               `Create invoice country: ${debug(body)}`\n            );\n          } else if (getErrorString(err.error) === 'Client is invalid') {\n            throw new InvoiceXpressInvalidClient(\n               `Create invoice country: ${debug(body)}`\n            );\n          } else {\n            throw new InvoiceXpressUnexpectedError(\n               `Create invoice: ${err.error} ${debug(body)}`\n            );\n          }\n        default : throw err;\n      }\n    });\n\n  }\n\n  static get(auth: Auth, invoiceId) : Promise<InvoiceGetResponse> {\n    return getter(getSetup(auth, invoiceReceiptUrl.get, { invoiceId }))\n    .get(this.root);\n  }\n\n  // warning: this deletes non updated items\n  static update( auth: Auth\n               , body: InvoiceUpdateRequest\n               , invoiceId : number\n               ) : Promise<void> {\n    return publisher({ ...putSetup(auth, invoiceReceiptUrl.update, {invoiceId})\n                     , root: this.root\n                     , body\n                     });\n  }\n\n  static listAll( auth: Auth\n                , query: InvoiceListQuery\n                ) : Promise<InvoiceGetResponse[]> {\n    return getter(listSetup(auth, invoiceReceiptUrl.listAll, query))\n    // { invoices: { '@': Type, {invoice: InvoiceGetResponse}[] }}\n    .get('invoices')\n    // {invoice: InvoiceGetResponse}[]\n    .get('invoice')\n    // xml lib places single element array as single object\n    // we do not want that\n    .then(data => toArray(data));\n  }\n\n  static changeState( auth: Auth\n                    , body: InvoiceChangeStateRequest\n                    , invoiceId: number\n                    ) : Promise<void> {\n    return publisher({ ...putSetup( auth\n                                  , invoiceReceiptUrl.changeStatus\n                                  , {invoiceId}\n                                  )\n                     , root: this.root\n                     , body\n                     });\n  }\n\n  static generatePDF( auth: Auth\n                    , invoiceId: number\n                  ): Promise<GeneratePdfResponse>{\n    return getter(getSetup(auth, invoiceReceiptUrl.generatePdf, { invoiceId }))\n    .get('output');\n  }\n\n}\n"]}