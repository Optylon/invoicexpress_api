{"version":3,"sources":["lib/api/account/index.ts","lib/api/account/index.js"],"names":["accountUrlFn","accountName","accountUrl","create","get","accountId","suspend","activate","update","Account","body","Object","assign","root","auth","then","accountData","fiscalId","toString"],"mappings":";;;;;;;qjBAAA;AACA;AACA;;;AAOA;;AAKA;;;;AAoEA;AACA;AACA;AACA,IAAMA,eAAe,SAAfA,YAAe;AAAA,WAAkB,mBAAQC,WAAR,CAAlB;AAAA,CAArB;AACO,IAAMC,kCACX;AAGEC,YAAU;AAAA,eAAS,mBAAQ,KAAR,CAAT;AAAA,KAHZ;AAIEC,SAAU;AAAA,YAAEH,WAAF,QAAEA,WAAF;AAAA,YAAeI,SAAf,QAAeA,SAAf;AAAA,eACSL,aAAaC,WAAb,CADT,SACsCI,SADtC;AAAA,KAJZ;AAMEC,aAAU;AAAA,YAAEL,WAAF,SAAEA,WAAF;AAAA,YAAeI,SAAf,SAAeA,SAAf;AAAA,eACSL,aAAaC,WAAb,CADT,SACsCI,SADtC;AAAA,KANZ;AAQEE,cAAU;AAAA,YAAEN,WAAF,SAAEA,WAAF;AAAA,YAAeI,SAAf,SAAeA,SAAf;AAAA,eACSL,aAAaC,WAAb,CADT,SACsCI,SADtC;AAAA,KARZ;AAUEG,YAAQ;AAAA,YAAEP,WAAF,SAAEA,WAAF;AAAA,YAAeI,SAAf,SAAeA,SAAf;AAAA,eACWL,aAAaC,WAAb,CADX,SACwCI,SADxC;AAAA;AAVV,CADK;AAeP;AACA;AACA;;IACMI,O,WAAAA,O;;;;;;;+BAIAC,I,EAA0B;AAE5B,mBAAO,wBAASC,OAAAC,MAAA,CAAA,EAAA,EAAM,2BAAgBV,WAAWC,MAA3B,CAAN,EAAwC,EACrCU,MAAM,KAAKA,IAD0B,EAErCH,UAFqC,EAAxC,CAAT,CAAP;AAID;;;4BAEUI,I,EAAcT,S,EAAa;AACpC,mBAAO,qBAAO,oBAASS,IAAT,EAAeZ,WAAWE,GAA1B,EAA+B,EAAEC,oBAAF,EAA/B,CAAP,EACND,GADM,CACF,KAAKS,IADH,EAKNE,IALM,CAKD;AAAA,uBACJ,cAAcC,WAAd,IAA6BA,YAAYC,QAAzC,GChGQN,OAAOC,MAAP,CAAc,EAAd,EDiGFI,WCjGE,EDiGS,EAAEC,UAAUD,YAAYC,QAAZ,CAAqBC,QAArB,EAAZ,ECjGT,CDgGR,GAEEF,WAHE;AAAA,aALC,CAAP;AAUD;;;gCAEcF,I,EAAcT,S,EAAa;AACxC,mBAAO,wBAASM,OAAAC,MAAA,CAAA,EAAA,EAAM,oBAASE,IAAT,EAAeZ,WAAWI,OAA1B,EAAmC,EAACD,oBAAD,EAAnC,CAAN,CAAT,CAAP;AAED;;;iCAEeS,I,EAAcT,S,EAAa;AACzC,mBAAO,wBAASM,OAAAC,MAAA,CAAA,EAAA,EAAM,oBAASE,IAAT,EAAeZ,WAAWK,QAA1B,EAAoC,EAACF,oBAAD,EAApC,CAAN,CAAT,CAAP;AAED;;;+BAEcS,I,EACAT,S,EACAK,I,EAA0B;AACvC,mBAAO,wBAASC,OAAAC,MAAA,CAAA,EAAA,EAAM,oBAASE,IAAT,EAAeZ,WAAWM,MAA1B,EAAkC,EAACH,oBAAD,EAAlC,CAAN,EAAoD,EACjDQ,MAAM,KAAKA,IADsC,EAEjDH,UAFiD,EAApD,CAAT,CAAP;AAID;;;;;;AAzCMD,QAAAI,IAAA,GAAO,SAAP","file":"index.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport * as I    from '../sharedInterfaces';\n\nimport {\n  getter\n, publisher\n} from '../../request';\n\nimport {\n  baseUrl\n, unAuthPostSetup\n, postSetup\n, putSetup\n, getSetup\n, listSetup\n} from '../util';\n\nimport {\n  InvoiceExpressCountry\n, InvoiceExpressCountryCode\n} from '../../../lib/country';\n\nimport {\n  Address\n, Id\n, IdBase\n, SupportedLanguages\n, TermsAndConditions\n} from '../sharedInterfaces';\n\n// ---------------------------------------------------------------------------\n// Types ---------------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport interface AccountBase extends IdBase\n  { organizationName  : string\n  }\n\nexport interface AccountCreateRequest extends AccountBase\n  { firstName?        : string\n  , lastName?         : string\n  , phone?            : string\n  , password          : string\n  , taxCountry        : InvoiceExpressCountryCode | InvoiceExpressCountry\n  , language          : SupportedLanguages\n  , terms             : TermsAndConditions\n  }\n\nexport interface AccountUpdateRequest extends AccountBase, Address\n  {}\n\nexport type AccountState = 'active' | 'inactive' | 'pending';\n\nexport type RoleType = 'administrator' | 'contributor';\n\nexport interface Role\n  { role : RoleType\n  }\n\nexport type Roles = Role[];\n\nexport interface AccountStatus\n  {  state     : AccountState\n  }\n\nexport interface AccountCreateResponse extends AccountStatus\n  { id        : number\n    // organizationName\n  , name      : string\n  , url       : string\n  , apiKey    : string\n  }\n\nexport interface AccountGetResponse extends AccountBase, AccountStatus\n      // autoridade tributÃ¡ria configured??\n  {  atConfigured : boolean\n  }\n// ---------------------------------------------------------------------------\n// Account URLs --------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst accountUrlFn = accountName => `${baseUrl(accountName)}/api/accounts`;\nexport const accountUrl =\n  { /** The account creation URL is fixed, does not receive any meaningful\n     *  parameter, however for coherency we keep it as a function\n     */\n    create  : () => `${baseUrl('www')}/api/accounts/create.xml`\n  , get     : ({accountName, accountId}) =>\n                    `${accountUrlFn(accountName)}/${accountId}/get.xml`\n  , suspend : ({accountName, accountId}) =>\n                    `${accountUrlFn(accountName)}/${accountId}/suspend.xml`\n  , activate: ({accountName, accountId}) =>\n                    `${accountUrlFn(accountName)}/${accountId}/activate.xml`\n  , update: ({accountName, accountId}) =>\n                    `${accountUrlFn(accountName)}/${accountId}/update.xml`\n  };\n\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class Account {\n  static root = 'account';\n\n  static create(\n      body: AccountCreateRequest\n    ) : Promise<AccountCreateResponse> {\n    return publisher({ ...unAuthPostSetup(accountUrl.create)\n                     , root: this.root\n                     , body\n                     });\n  }\n\n  static get(auth: I.Auth, accountId: Id) : Promise<AccountGetResponse> {\n    return getter(getSetup(auth, accountUrl.get, { accountId }))\n    .get(this.root)\n    // invoice express allows for vat numbers like PT513222000\n    // which are not numbers at all. So, for consistency, we always convert\n    // to string\n    .then(accountData =>\n      'fiscalId' in accountData && accountData.fiscalId\n      ? {...accountData, fiscalId: accountData.fiscalId.toString() }\n      : accountData\n    );\n  }\n\n  static suspend(auth: I.Auth, accountId: Id) : Promise<void> {\n    return publisher({ ...putSetup(auth, accountUrl.suspend, {accountId})\n                     });\n  }\n\n  static activate(auth: I.Auth, accountId: Id) : Promise<void> {\n    return publisher({ ...putSetup(auth, accountUrl.activate, {accountId})\n                     });\n  }\n\n  static update( auth: I.Auth\n               , accountId: Id\n               , body: AccountUpdateRequest) : Promise<void> {\n    return publisher({ ...putSetup(auth, accountUrl.update, {accountId})\n                     , root: this.root\n                     , body\n                     });\n  }\n  // TODO: missing stats\n}\n","// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport { getter, publisher } from '../../request';\nimport { baseUrl, unAuthPostSetup, putSetup, getSetup } from '../util';\n// ---------------------------------------------------------------------------\n// Account URLs --------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst accountUrlFn = accountName => `${baseUrl(accountName)}/api/accounts`;\nexport const accountUrl = {\n    create: () => `${baseUrl('www')}/api/accounts/create.xml`,\n    get: ({ accountName, accountId }) => `${accountUrlFn(accountName)}/${accountId}/get.xml`,\n    suspend: ({ accountName, accountId }) => `${accountUrlFn(accountName)}/${accountId}/suspend.xml`,\n    activate: ({ accountName, accountId }) => `${accountUrlFn(accountName)}/${accountId}/activate.xml`,\n    update: ({ accountName, accountId }) => `${accountUrlFn(accountName)}/${accountId}/update.xml`\n};\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class Account {\n    static create(body) {\n        return publisher(Object.assign({}, unAuthPostSetup(accountUrl.create), { root: this.root, body }));\n    }\n    static get(auth, accountId) {\n        return getter(getSetup(auth, accountUrl.get, { accountId }))\n            .get(this.root)\n            .then(accountData => 'fiscalId' in accountData && accountData.fiscalId\n            ? Object.assign({}, accountData, { fiscalId: accountData.fiscalId.toString() }) : accountData);\n    }\n    static suspend(auth, accountId) {\n        return publisher(Object.assign({}, putSetup(auth, accountUrl.suspend, { accountId })));\n    }\n    static activate(auth, accountId) {\n        return publisher(Object.assign({}, putSetup(auth, accountUrl.activate, { accountId })));\n    }\n    static update(auth, accountId, body) {\n        return publisher(Object.assign({}, putSetup(auth, accountUrl.update, { accountId }), { root: this.root, body }));\n    }\n}\nAccount.root = 'account';\n"]}