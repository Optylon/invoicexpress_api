{"version":3,"sources":["lib/api/invoice/index.ts"],"names":["invoiceUrlFn","accountName","invoicesUrlFn","generatePdfUrlFn","invoiceUrl","create","get","invoiceId","update","listAll","changeStatus","generatePdf","Invoice","auth","body","Object","assign","root","catch","StatusCodeError","err","statusCode","error","startsWith","query","then","data"],"mappings":";;;;;;;qjBAAA;AACA;AACA;;AAIA;AACA;AACA;;;AALA;;;;AAMA;;AAMA;;AAkCA;;AAIA;;;;;;AA+KA;AACA;AACA;AACA,IAAMA,eAAgB,SAAhBA,YAAgB;AAAA,WAAkB,mBAAQC,WAAR,CAAlB;AAAA,CAAtB;AACA,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,WAAkB,mBAAQD,WAAR,CAAlB;AAAA,CAAtB;AACA,IAAME,mBAAmB,SAAnBA,gBAAmB;AAAA,WAAkB,mBAAQF,WAAR,CAAlB;AAAA,CAAzB;AAEO,IAAMG,kCACX,EAAEC,QAAU;AAAA,YAAEJ,WAAF,QAAEA,WAAF;AAAA,eAAsBC,cAAcD,WAAd,CAAtB;AAAA,KAAZ;AACEK,SAAU;AAAA,YAAEL,WAAF,SAAEA,WAAF;AAAA,YAAeM,SAAf,SAAeA,SAAf;AAAA,eACOL,cAAcD,WAAd,CADP,SACqCM,SADrC;AAAA,KADZ;AAIEC,YAAU;AAAA,YAAEP,WAAF,SAAEA,WAAF;AAAA,YAAeM,SAAf,SAAeA,SAAf;AAAA,eACOL,cAAcD,WAAd,CADP,SACqCM,SADrC;AAAA,KAJZ;AAMEE,aAAU;AAAA,YAAER,WAAF,SAAEA,WAAF;AAAA,eAAsBC,cAAcD,WAAd,CAAtB;AAAA,KANZ;AAOES,kBAAc;AAAA,YAAET,WAAF,SAAEA,WAAF;AAAA,YAAeM,SAAf,SAAeA,SAAf;AAAA,eACGP,aAAaC,WAAb,CADH,SACgCM,SADhC;AAAA,KAPhB;AASEI,iBAAa;AAAA,YAAEV,WAAF,SAAEA,WAAF;AAAA,YAAeM,SAAf,SAAeA,SAAf;AAAA,eACIJ,iBAAiBF,WAAjB,CADJ,SACqCM,SADrC;AAAA;AATf,CADK;AAcP;AACA;AACA;;IACMK,O,WAAAA,O;;;;;;;+BAIAC,I,EACAC,I,EAA0B;AAE5B,mBAAO,wBAASC,OAAAC,MAAA,CAAA,EAAA,EAAM,qBAAUH,IAAV,EAAgBT,WAAWC,MAA3B,CAAN,EAAwC,EACrCY,MAAM,KAAKA,IAD0B,EAErCH,UAFqC,EAAxC,CAAT,EAINI,KAJM,CAIA,iBAAOC,eAJP,EAIwB,eAAG;AAChC,wBAAQC,IAAIC,UAAZ;AACE,yBAAK,GAAL;AAAU,8BAAM,wCAA+B,kBAAMR,IAAN,CAA/B,CAAN;AACV;AACA,yBAAK,GAAL;AACE,4BAAI,6BAAeO,IAAIE,KAAnB,MACE,uCADN,EAC+C;AAC7C,kCAAM,8DACsB,kBAAMR,IAAN,CADtB,CAAN;AAGD,yBALD,MAKO,IAAI,6BAAeM,IAAIE,KAAnB,EAA0BC,UAA1B,CAAqC,SAArC,CAAJ,EAAqD;AAC1D,kCAAM,qEACwB,kBAAMT,IAAN,CADxB,CAAN;AAGD,yBAJM,MAIA,IAAI,6BAAeM,IAAIE,KAAnB,MAA8B,mBAAlC,EAAuD;AAC5D,kCAAM,qEACwB,kBAAMR,IAAN,CADxB,CAAN;AAGD,yBAJM,MAIA;AACL,kCAAM,+DACgBM,IAAIE,KADpB,SAC6B,kBAAMR,IAAN,CAD7B,CAAN;AAGD;AACH;AAAU,8BAAMM,GAAN;AAtBZ;AAwBD,aA7BM,CAAP;AA+BD;;;4BAEUP,I,EAAYN,S,EAAS;AAC9B,mBAAO,qBAAO,oBAASM,IAAT,EAAeT,WAAWE,GAA1B,EAA+B,EAAEC,oBAAF,EAA/B,CAAP,EACND,GADM,CACF,KAAKW,IADH,CAAP;AAED;AAED;;;;+BACeJ,I,EACAC,I,EACAP,S,EAAkB;AAE/B,mBAAO,wBAASQ,OAAAC,MAAA,CAAA,EAAA,EAAM,oBAASH,IAAT,EAAeT,WAAWI,MAA1B,EAAkC,EAACD,oBAAD,EAAlC,CAAN,EAAoD,EACjDU,MAAM,KAAKA,IADsC,EAEjDH,UAFiD,EAApD,CAAT,CAAP;AAID;;;gCAEeD,I,EACAW,K,EAAuB;AAErC,mBAAO,qBAAO,qBAAUX,IAAV,EAAgBT,WAAWK,OAA3B,EAAoCe,KAApC,CAAP,EAENlB,GAFM,CAEF,UAFE,EAINA,GAJM,CAIF,SAJE,EAONmB,IAPM,CAOD;AAAA,uBAAQ,mBAAQC,IAAR,CAAR;AAAA,aAPC,CAAP;AAQD;;;oCAEmBb,I,EACAC,I,EACAP,S,EAAiB;AAEnC,mBAAO,wBAASQ,OAAAC,MAAA,CAAA,EAAA,EAAM,oBAAUH,IAAV,EACUT,WAAWM,YADrB,EAEU,EAACH,oBAAD,EAFV,CAAN,EAGe,EACZU,MAAM,KAAKA,IADC,EAEZH,UAFY,EAHf,CAAT,CAAP;AAOD;;;oCAEmBD,I,EACAN,S,EAAiB;AAEnC,mBAAO,qBAAO,oBAASM,IAAT,EAAeT,WAAWO,WAA1B,EAAuC,EAAEJ,oBAAF,EAAvC,CAAP,EACND,GADM,CACF,QADE,CAAP;AAED;;;;;;AAtFMM,QAAAK,IAAA,GAAO,SAAP","file":"index.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport errors   from 'request-promise/errors';\nimport R        from 'ramda';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  getter\n, publisher\n, getErrorString\n} from '../../request';\n\nimport {\n  baseUrl\n, unAuthPostSetup\n, postSetup\n, putSetup\n, getSetup\n, listSetup\n, toArray\n} from '../util';\n\nimport {\n  InvoiceExpressCountry\n, InvoiceExpressCountryCode\n} from '../../../lib/country';\n\nimport {\n  TaxName\n, TaxBase\n, DefaultTaxEnum\n, TaxCreate\n, TaxGet\n, ItemBase\n, InvoiceItemsCreate\n} from '../items';\n\nimport {\n  Address\n, Auth\n, IdBase\n, SendOptions\n, SupportedLanguages\n, Type\n} from '../sharedInterfaces';\n\nimport {\n  debug\n} from '../../../utils';\n\nimport {\n  InvalidInvoiceXpressAPIKey\n, InvoiceXpressInvalidClient\n, InvoiceXpressNotArray\n, InvoiceXpressUnkownCountry\n, InvoiceXpressUnexpectedError\n} from '../../errors';\n\n// ---------------------------------------------------------------------------\n// Types ---------------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport interface Client extends Address, Partial<IdBase>\n  { id?           : number\n  , name          : string\n  , code          : string\n  , language?     : SupportedLanguages\n  , country?      : InvoiceExpressCountry\n  , website?      : string\n  , phone?        : string\n  , fax?          : string\n  , observations? : string\n  , sendOptions?  : SendOptions\n  }\n\nexport type TaxExemption\n  = 'M01'\n  | 'M02'\n  | 'M03'\n  | 'M04'\n  | 'M05'\n  | 'M06'\n  | 'M07'\n  | 'M08'\n  | 'M09'\n  | 'M10'\n  | 'M11'\n  | 'M12'\n  | 'M13'\n  | 'M14'\n  | 'M15'\n  | 'M16'\n  | 'M99'\n  ;\n\nexport interface InvoiceItemGet extends ItemBase\n  { unit          : string\n  , quantity      : number\n  , tax           : TaxGet\n  , discount      : number // between 0 and 100 ?\n  , discountAmount: number\n  , subtotal      : number\n  , taxAmount     : number\n  , total         : number\n  }\n\nexport interface InvoiceItemsGet\n  { '@': Type\n  , item: Array<InvoiceItemGet>\n  }\n\nexport type InvoiceStatusBase\n  = 'finalized'\n  | 'deleted'\n  | 'second_copy'\n  | 'canceled'\n  | 'settled'\n  | 'unsettled'\n  ;\n\nexport type InvoiceStatusChange\n  = InvoiceStatusBase\n  ;\n\nexport type InvoiceStatus\n  = InvoiceStatusChange\n  | 'draft' // you can't change to draft\n  | 'final' // or final?\n  ;\n\nexport type InvoiceType\n  = 'Invoice'\n  | 'CashInvoice'\n  | 'InvoiceReceipt'\n  | 'SimplifiedInvoice'\n  | 'CreditNote'\n  | 'DebitNote'\n  | 'Receipt'\n  ;\n\nexport type InvoiceCurrency = 'Euro';\n\n// export interface Invoice\n  // { date          : string\n  // , dueDate       : string\n  // , reference?    : string\n  // , observations? : string\n    // // %, number between 0 and 99.99\n  // , retention     : number\n  // , taxExemption? : TaxExemption\n  // , sequenceId?   : string\n  // , manualSequenceNumber? : string\n  // , client        : Client\n  // , items         : Items\n  // , taxRetention? : number\n  // , mbReference?  : string\n  // };\n\nexport interface InvoiceBase\n  { date          : string\n  , dueDate       : string\n  , reference?    : string\n  , observations? : string\n  , client        : Client\n  , retention?    : number\n  }\n\nexport interface InvoiceCreateRequest\n  extends InvoiceBase\n  { // %, number between 0 and 99.99\n    taxExemption? : TaxExemption\n  , sequenceId?   : number\n  , manualSequenceNumber? : string\n  , items         : InvoiceItemsCreate\n  , taxRetention? : number\n  , mbReference?  : string\n  }\n\nexport type InvoiceUpdateRequest = InvoiceCreateRequest & { invoiceId: number };\n\nexport interface InvoiceGetResponse\n  extends InvoiceBase\n  { id            : string\n  , status        : InvoiceStatus\n  , archived      : boolean\n  , type          : InvoiceType\n  , sequenceNumber: number\n  , invertedSequenceNumber?: string\n  , permalink     : string\n  , saftHash      : string\n  , currency      : InvoiceCurrency\n  , items         : InvoiceItemsGet\n  , sum           : number\n  , discount      : number\n  , beforeTaxes   : number\n  , taxes         : number\n  , total         : number\n  }\n\nexport interface InvoiceListQuery\n  { text?                     : string\n  , 'type[]'                  : InvoiceType\n  , 'status[]'                : InvoiceStatus\n  , 'date[from]'?             : string\n  , 'date[to]'?               : string\n  , 'dueDate[from]'?          : string\n  , 'dueDate[to]'?            : string\n  , 'totalBeforeTaxes[from]'? : number\n  , 'totalBeforeTaxes[to]'?   : number\n  , nonArchived?              : boolean\n  , archived?                 : boolean\n  , page?                     : number\n  , perPage?                  : number\n  }\n\nexport type InvoiceListResponse = InvoiceGetResponse[];\n\nexport interface InvoiceChangeStateRequest\n  { state   : InvoiceStatusChange\n  , message?: string\n  }\n\nexport interface GeneratePdfResponse\n  { pdfUrl : string\n  }\n\n// ---------------------------------------------------------------------------\n// Invoice URLs --------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst invoiceUrlFn  = accountName => `${baseUrl(accountName)}/invoice`;\nconst invoicesUrlFn = accountName => `${baseUrl(accountName)}/invoices`;\nconst generatePdfUrlFn = accountName => `${baseUrl(accountName)}/api/pdf`;\n\nexport const invoiceUrl =\n  { create  : ({accountName}) => `${invoicesUrlFn(accountName)}.xml`\n  , get     : ({accountName, invoiceId}) =>\n                  `${invoicesUrlFn(accountName)}/${invoiceId}.xml`\n\n  , update  : ({accountName, invoiceId}) =>\n                  `${invoicesUrlFn(accountName)}/${invoiceId}.xml`\n  , listAll : ({accountName}) => `${invoicesUrlFn(accountName)}.xml`\n  , changeStatus: ({accountName, invoiceId}) =>\n                  `${invoiceUrlFn(accountName)}/${invoiceId}/change-state.xml`\n  , generatePdf: ({accountName, invoiceId}) =>\n                  `${generatePdfUrlFn(accountName)}/${invoiceId}.xml`\n  };\n\n// ---------------------------------------------------------------------------\n// External Class ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nexport class Invoice {\n  static root = 'invoice';\n\n  static create(\n      auth: Auth\n    , body: InvoiceCreateRequest\n    ) : Promise<InvoiceGetResponse> {\n    return publisher({ ...postSetup(auth, invoiceUrl.create)\n                     , root: this.root\n                     , body\n                     })\n    .catch(errors.StatusCodeError, err => {\n      switch (err.statusCode) {\n        case 401: throw new InvalidInvoiceXpressAPIKey(debug(auth));\n        // TODO: still more errors to check\n        case 422:\n          if (getErrorString(err.error) ===\n                'Items element should be of type array') {\n            throw new InvoiceXpressNotArray(\n               `Create invoice items: ${debug(body)}`\n            );\n          } else if (getErrorString(err.error).startsWith('Country')) {\n            throw new InvoiceXpressUnkownCountry(\n               `Create invoice country: ${debug(body)}`\n            );\n          } else if (getErrorString(err.error) === 'Client is invalid') {\n            throw new InvoiceXpressInvalidClient(\n               `Create invoice country: ${debug(body)}`\n            );\n          } else {\n            throw new InvoiceXpressUnexpectedError(\n               `Create invoice: ${err.error} ${debug(body)}`\n            );\n          }\n        default : throw err;\n      }\n    });\n\n  }\n\n  static get(auth: Auth, invoiceId) : Promise<InvoiceGetResponse> {\n    return getter(getSetup(auth, invoiceUrl.get, { invoiceId }))\n    .get(this.root);\n  }\n\n  // warning: this deletes non updated items\n  static update( auth: Auth\n               , body: InvoiceUpdateRequest\n               , invoiceId : number\n               ) : Promise<void> {\n    return publisher({ ...putSetup(auth, invoiceUrl.update, {invoiceId})\n                     , root: this.root\n                     , body\n                     });\n  }\n\n  static listAll( auth: Auth\n                , query: InvoiceListQuery\n                ) : Promise<InvoiceGetResponse[]> {\n    return getter(listSetup(auth, invoiceUrl.listAll, query))\n    // { invoices: { '@': Type, {invoice: InvoiceGetResponse}[] }}\n    .get('invoices')\n    // {invoice: InvoiceGetResponse}[]\n    .get('invoice')\n    // xml lib places single element array as single object\n    // we do not want that\n    .then(data => toArray(data));\n  }\n\n  static changeState( auth: Auth\n                    , body: InvoiceChangeStateRequest\n                    , invoiceId: number\n                    ) : Promise<void> {\n    return publisher({ ...putSetup( auth\n                                  , invoiceUrl.changeStatus\n                                  , {invoiceId}\n                                  )\n                     , root: this.root\n                     , body\n                     });\n  }\n\n  static generatePDF( auth: Auth\n                    , invoiceId: number\n                  ): Promise<GeneratePdfResponse>{\n    return getter(getSetup(auth, invoiceUrl.generatePdf, { invoiceId }))\n    .get('output');\n  }\n\n}\n"]}