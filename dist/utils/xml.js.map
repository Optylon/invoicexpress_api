{"version":3,"sources":["utils/xml.ts"],"names":["strictParsing","xmlPath","existsSync","process","env","writeFile","fn","data","Promise","resolve","reject","mode","err","incomingXmlLog","xmlFile","join","format","xml","then","forObj","flip","mapObjIndexed","parseInvoiceExpressDate","tempDate","str","isValid","deepMap","obj","filter","val","key","Array","isArray","Date","map","item","nilAttrToNull","_key","js2xmlparserOptions","xml2jsOptions","explicitArray","emptyTag","attrkey","charkey","valueProcessors","fromXml","parseString","toXml","root","body","dateConverted","search","parse"],"mappings":"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","file":"xml.js","sourcesContent":["// ---------------------------------------------------------------------------\n// 'External' modules --------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport request      from 'request-promise';\nimport js2xmlparser from 'js2xmlparser';\nimport xml2js       from 'xml2js';\nimport moment       from 'moment';\nimport R            from 'ramda';\n// for debugging purposes only\nimport fs           from 'fs';\nimport path         from 'path';\n\nimport {\n  parseBooleans\n, parseNumbers\n} from 'xml2js/lib/processors';\n\nimport {\n  camelizeKeys\n, decamelizeKeys\n} from 'humps';\n\n// ---------------------------------------------------------------------------\n// Project modules -----------------------------------------------------------\n// ---------------------------------------------------------------------------\nimport {\n  invoiceExpressDateFormat\n, platformDateFormat\n} from './constants';\n\nimport {\n  debug\n} from '../utils';\n\n// ---------------------------------------------------------------------------\n// Constants -----------------------------------------------------------------\n// ---------------------------------------------------------------------------\n\n/** moment.js parse mode */\nconst strictParsing = true;\n\n// ---------------------------------------------------------------------------\n// Debuging features ---------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst xmlPath = fs.existsSync(process.env['XML_LOG_PATH'])\n              && process.env['XML_LOG_PATH'] || null;\n\nexport const writeFile = (fn: string, data: any) : Promise<void> =>\n  new Promise((resolve, reject) =>\n    fs.writeFile(fn, data, { mode: 'utf8' }, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    }));\n\nconst incomingXmlLog = xml => {\n  const xmlFile = xmlPath ? path.join(xmlPath\n                                     , `incoming_${moment().format()}.xml`)\n                          : null;\n  return !xmlFile ? Promise.resolve(xml)\n                  : writeFile(xmlFile, xml).then(() => xml);\n};\n\n// ---------------------------------------------------------------------------\n// Internal Functions --------------------------------------------------------\n// ---------------------------------------------------------------------------\n\n/** Iterate over all own properties of object with (value, key) */\nconst forObj = R.flip(R.mapObjIndexed);\n\nconst parseInvoiceExpressDate = str => {\n  // incoming format for dates from Invoice Express\n  const tempDate = moment(str, 'DD/MM/YYYY', strictParsing);\n  if (tempDate.isValid()) {\n    // format expected by the platform\n    return tempDate.format('YYYY-MM-DD');\n  } else {\n    return str;\n  }\n};\n\n/** Apply function to all keys and sub-keys that match the\n *  given filter(val,key) */\nconst deepMap = (obj, filter, fn) =>\n  forObj(obj, (val, key) => {\n    // if it's a relevant (final) key, analyse it\n    if (   filter(val,key)) {\n      return fn(val);\n    // recurse through objects except if they are Dates or moment\n    } else if (val && typeof val === 'object'\n                   && val !== null\n                   && !Array.isArray(val)\n                   && !(val instanceof Date)\n              ) {\n      return deepMap(val, filter,  fn);\n      // recursive arrays\n    } else if (Array.isArray(obj[key])) {\n      return val.map(item => deepMap(item, filter, fn));\n    } else {\n      return val;\n    }\n  });\n\n/** Tags which have the nil === 'true' attribute are correctly\n *  translated into javascript null values\n */\n// https://stackoverflow.com/a/774234\nconst nilAttrToNull = (obj) =>\n  deepMap( obj\n         , (val, _key) => typeof val === 'object'\n                       && val\n                       && '@' in val\n                       && 'nil' in val['@']\n                       && val['@']['nil'] === 'true'\n         , () => null);\n\n// ---------------------------------------------------------------------------\n// Configurations ------------------------------------------------------------\n// ---------------------------------------------------------------------------\nconst js2xmlparserOptions =\n  { };\n\nconst xml2jsOptions : xml2js.Options =\n  { explicitArray: false\n  , emptyTag: null\n  , attrkey: '@'\n  , charkey: '#'\n  , valueProcessors: [ parseNumbers\n                     , parseBooleans\n                     , parseInvoiceExpressDate\n                     ]\n  };\n\n// ---------------------------------------------------------------------------\n// External Functions --------------------------------------------------------\n// ---------------------------------------------------------------------------\n/** Convert from Invoice Express XML format */\nexport const fromXml = (xml) =>\n  incomingXmlLog(xml)\n  .then(() =>\n    new Promise((resolve, reject)=>{\n      xml2js.parseString(xml, xml2jsOptions, (err, data)=>{\n        if (err) {\n          return reject(err);\n        } else {\n          return resolve(camelizeKeys(nilAttrToNull(data)));\n        }\n      });\n    })\n  );\n\n/** Convert to Invoice Express XML format */\nexport const toXml = (root, body) => {\n  const dateConverted = deepMap(\n        decamelizeKeys(body)\n      , (val, key) =>\n          val\n          && key.search(/.*date.*/i) !== -1\n          && !Array.isArray(val)\n          && (typeof val !== 'object' || val instanceof Date)\n      , str => {\n    if (str && ( typeof str === 'string'\n               || str instanceof Date))  {\n      const tempDate = moment(str, 'YYYY-MM-DD', strictParsing);\n      if (tempDate.isValid()) {\n        return tempDate.format('DD/MM/YYYY');\n      } else {\n        return str;\n      }\n    } else {\n      return str;\n    }\n  });\n  return js2xmlparser.parse(root, dateConverted, js2xmlparserOptions);\n};\n"]}